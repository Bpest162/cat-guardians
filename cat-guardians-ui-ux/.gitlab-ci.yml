workflow:
  rules:
    - if: $SKIP_WORKFLOW
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~ /^(?i)draft/
      when: never
    - if: $CI_MERGE_REQUEST_ID
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME == $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^(develop|main)$/
    - if: $CI_COMMIT_BRANCH =~ /^(develop|main)$/


stages:
  - lint
  - auto-bump
  - build
  

lint:
  stage: lint
  image: node:latest
  script:
    - yarn install
    - yarn lint
  

auto-bump:
  stage: auto-bump
  only:
    - main
  image:
    name: node:latest
  script:
    - echo $CI_COMMIT_SHORT_SHA > tag.txt
  artifacts:
    expire_in: 10 mins
    paths:
      - tag.txt


# You must have personal access token (PA_TOKEN) with the following permissions: read_repository
build-docker-image:
  only:
    - main
  stage: build
  variables:
    PROJECT_URL: "https://oauth2:$PA_TOKEN@git.foxminded.ua/$CI_PROJECT_PATH"
    BUILD_SCRIPT_PATH: scripts/ecr_image_build_push.sh  # The script which will be executed on the instance,
    BUILD_SCRIPT_NAME: ecr_image_build_push.sh          # for building and pushing the image to ECR
  image:
    name: amazon/aws-cli
    entrypoint: [ "" ]
  before_script:
    - yum update -y
    - yum install -y openssh-clients
    - eval $(ssh-agent -s)
    - aws --version
    - export TAG=$(cat tag.txt)
    - echo $TAG
    - echo $CI_COMMIT_SHORT_SHA
    - echo $REACT_APP_API_BASE_URL
    - echo $REACT_APP_GOOGLE_MAP_API_KEY
    # Launch an EC2 instance with the user data script to install docker, docker-compose and aws-cli, Ubuntu 20.04 LTS image AMI id
    # Change the security group id, key pair name and the user data script to your own
    # security group id, open port 22, 80, 443 for outbound and inbound rules
    - INSTANCE_ID=$(aws ec2 run-instances
      --image-id $EC2_IMAGE_ID
      --count $EC2_COUNT
      --instance-type $EC2_INSTANCE_TYPE
      --security-group-ids $EC2_SECURITY_GROUP_ID
      --region $AWS_DEFAULT_REGION
      --key-name $EC2_KEY_NAME
      --user-data file://./scripts/user-data.sh
      --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=build-push-server}]'
      --query 'Instances[0].InstanceId'
      --output text
      )
    - echo $INSTANCE_ID
    - echo $INSTANCE_ID > /tmp/instance_id.txt  # Save instance id to a file
    # Get the public DNS name of the instance
    - PUBLIC_DNS=$(aws ec2 describe-instances
        --instance-ids $INSTANCE_ID
        --query 'Reservations[0].Instances[0].PublicDnsName'
        --output text)
    - echo $PUBLIC_DNS
    - echo  $SSH_USER@$PUBLIC_DNS
    - aws ec2 wait instance-status-ok --instance-ids $INSTANCE_ID
  script:
    # You must have the private ssh key.pem (EC2_PEM_KEY) in the CI/CD variables, this key is the same as --key-name $EC2_KEY_NAME
    - chmod +x ./$BUILD_SCRIPT_PATH
    - echo "$EC2_PEM_KEY" > /home/pair-key.pem
    - chmod 400 /home/pair-key.pem
    - cat ./$BUILD_SCRIPT_PATH | ssh -i /home/pair-key.pem -o StrictHostKeyChecking=no ubuntu@$PUBLIC_DNS "
      cat > /home/ubuntu/$BUILD_SCRIPT_NAME &&
      chmod +x /home/ubuntu/$BUILD_SCRIPT_NAME &&
      PA_TOKEN=$PA_TOKEN
      TAG=$TAG
      REACT_APP_API_BASE_URL=$REACT_APP_API_BASE_URL
      REACT_APP_GOOGLE_MAP_API_KEY=$REACT_APP_GOOGLE_MAP_API_KEY
      CI_COMMIT_SHORT_SHA=$CI_COMMIT_SHORT_SHA
      CI_PROJECT_NAME=$CI_PROJECT_NAME
      PROJECT_URL=$PROJECT_URL
      AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
      AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
      AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION
      AWS_ECR_REGISTRY=$AWS_ECR_REGISTRY
      AWS_ECR_IMAGE_URI_UI=$AWS_ECR_IMAGE_URI_UI
      bash /home/ubuntu/$BUILD_SCRIPT_NAME > /home/ubuntu/output.txt
      "
#   Terminate the instance after the script is executed
  after_script:
    - export INSTANCE_ID=$(cat /tmp/instance_id.txt)
    - echo $INSTANCE_ID
    - aws ec2 terminate-instances --instance-ids $INSTANCE_ID
    - aws ec2 wait instance-terminated --instance-ids $INSTANCE_ID
    - echo "Instance $INSTANCE_ID terminated"
